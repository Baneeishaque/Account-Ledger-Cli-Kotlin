/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package transactionInserterForAccountLedger.cli.app

import kotlinx.cli.ArgParser
import kotlinx.cli.ArgType
import kotlinx.cli.default
import kotlinx.coroutines.runBlocking
import java.util.*

object App {

    const val appName = "Account Ledger CLI App"
    const val version = "0.0.1"
}

fun main(args: Array<String>) {

    val parser = ArgParser(programName = "${App.appName}:: ${App.version}")
    val version by parser.option(type = ArgType.Boolean, shortName = "V", description = "Version").default(false)

    if (args.isEmpty()) {

//        println("No options...")
        do {
            println("\nAccount Ledger")
            println("1 : Login")
            println("2 : Registration")
            println("0 : Exit")
            println()
            print("Enter Your Choice : ")
            val reader = Scanner(System.`in`)
            val choice = reader.nextInt()
            when (choice) {

                1 -> login()
                2 -> register()
                0 -> println("Thanks...")
                else -> println("Invalid option, try again...")
            }
//            println("1 : View Accounts")
//            println("2 : Insert Transaction")
        } while (choice != 0)

    } else {

        // Add all input to parser
        parser.parse(args)

        if (version) println(App.version)
    }
}

fun register() {
    TODO("Not yet implemented")
}

fun login() {

    println("\nAccount Ledger Authentication")
    print("Enter Your Username : ")
    val username = readLine()
    print("Enter Your Password : ")
    val password = readLine()

    val user = UserDataSource()
    println("Contacting Server...")
    val apiResponse: ApiResult<AccountLedgerApiLoginResponse>
    runBlocking {

        apiResponse = user.selectUser(username = username, password = password)
    }
//    println("Response : $apiResponse")
    if (apiResponse.isError()) {

        println("Error : ${(apiResponse.getValue() as Exception).localizedMessage}")

    } else {

        val loginResponseResult = apiResponse.getValue() as AccountLedgerApiLoginResponse
        if (loginResponseResult.userCount == 0) {

            println("Invalid Credentials...")

        } else if (loginResponseResult.userCount == 1) {

            println("Login Success...")
            userScreen()

        } else {

            println("Server Execution Error...")
        }
    }
}

fun userScreen() {
    TODO("Not yet implemented")
}

